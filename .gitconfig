[hub]
    protocol = https

[user]
	name = Joshua Appelman
	email = joshua@jbna.nl

[credential]
	helper = store

[core]
	editor = vim
	excludesfile = ~/.gitignore
	autocrlf = input

[alias]
    # short aliases
    st = status
    co = checkout
    ci = commit
    br = branch
    df = diff
    lg = log -p
    rso = remote show origin
    me = config user.name

    up = !git update
    smash = !git ir

    unstage = reset HEAD
    undo-commit = reset --soft HEAD^

    # interactive rebase
    ir = !sh -c 'git rebase -i origin/${1-master}' -

    # log aliases
    log-branch = log origin/master..
    blog = !git log-branch
    mlog = !git log --committer=\"`git me`\"

    # update current branch
    update = !sh -c 'git fetch origin && git rebase -p origin/${1-master}' -

    # creates a diff of current branch against supplied branch, usage: git export-branch [refbranch]
    branch-name = !git for-each-ref --format='%(refname:short)' `git symbolic-ref HEAD`
    export-branch = !git format-patch --stdout $1 > ~/branches/`git branch-name`.diff

    # all commits that aren't merges on all branches
    all = !git log --pretty=oneline --abbrev-commit --all --no-merges

    # all commits today for only me
    today = !git all --since='12am' --committer=\"`git me`\"

    # today's commits without formatting or paging
    today-text = !git --no-pager today --no-color

    # files different from master on current branch
    fdm = !git diff origin/master... --name-status

    # last commit info in svn style
    last = !git show --name-status
    last-files = !git last --pretty=format:""

    # last commit only certain type of modification
    mlast = !git last-files | awk 'match($1, /M/) {print $2}'
    alast = !git last-files | awk 'match($1, /A/) {print $2}'
    dlast = !git last-files | awk 'match($1, /D/) {print $2}'

    # `git done`
    # current branch: merge, push, non-forced delete branch, show info
    done = !sh -c '~/bin/done -d $1' -

    # `git publish`
    # current branch: merge, push, show info
    publish = !sh -c '~/bin/done $1' -

    # `git lint`
    # lints all .php files that are different between current branch and origin/master
    lint = !sh -c '~/bin/lint'

    # `git spawn my-new-branch`
    # make new branch based on master no matter which branch is checked out
    spawn = !sh -c 'git checkout -b $1 ${2-master} && git config branch.$1.localmerge ${2-master}' -

    # `git nuke my-old-branch`
    # (Checks out master and does a non-forced delete on the branch entered)
    nuke = !git co master && sh -c 'git br -d $1' -

    # `git sync`
    # update current branch and master
    sync = !git update && \
    git co master && \
    git pull && \
    git co @{-1}

    # `git save`
    # saves a commit in current branch: local branches you will be rebasing
    save = !git commit -am \"save game\"

    # attempt to cleanup some common problems
    unfuck = !git fsck && git remote prune origin && git gc

    # find the top level of current repository
    top = !git rev-parse --show-toplevel

    # list files changed by last commit in absolute location
    list = !git show --pretty=format:"" --name-only | sed '/^$/d' | sed \"s|^|`git top`/|g\"

    # give a count of dirty files
    dirty = !git status --porcelain -uno | wc -l

    # number of non-merge commits
    peeps = !git log --pretty=format:"%Cblue%aN%Creset" --no-merges | sort | uniq -c | sort -rn
    mergers = !git log --pretty=format:"%Cred%aN%Creset" --merges | sort | uniq -c | sort -rn

[color]
	ui = true
    diff = auto
    status = auto
    branch = auto

[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path =

[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

[http]
    sslVerify = false

[github]
	user = jbnicolai
